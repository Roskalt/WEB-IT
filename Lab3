user1@lab:~$ sleep 100
^C

user1@lab:~$ sleep 100
^Z
[1]+  Stopped                 sleep 100

user1@lab:~$ ps -l
F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
0 S  1000  3079  3078  0  80   0 -  5282 wait   pts/2    00:00:00 bash
0 T  1000  3088  3079  0  80   0 -  1606 signal pts/2    00:00:00 sleep
0 R  1000  3099  3079  0  80   0 -  7005 -      pts/2    00:00:00 ps

user1@lab:~$ kill -9 3088

user1@lab:~$ ps -l
F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
0 S  1000  3079  3078  0  80   0 -  5284 wait   pts/2    00:00:00 bash
0 R  1000  3152  3079  0  80   0 -  7005 -      pts/2    00:00:00 ps
[1]+  Killed                  sleep 100

user1@lab:~$ ps -l
F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
0 S  1000  3079  3078  0  80   0 -  5284 wait   pts/2    00:00:00 bash
0 R  1000  3154  3079  0  80   0 -  7005 -      pts/2    00:00:00 ps

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

trap "echo ' Trapped Ctrl-C'" SIGINT
echo This is a test script

count=1
while [ $count -le 10 ]
do
echo "Loop #$count"
sleep 1
count=$(( $count + 1 ))
done

user1@lab:~$ ./myscript
This is a test script
Loop #1
Loop #2
Loop #3
^C Trapped Ctrl-C
Loop #4
Loop #5
^C Trapped Ctrl-C
Loop #6
Loop #7
Loop #8
^C Trapped Ctrl-C
Loop #9
Loop #10

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

trap "echo Goodbye..." EXIT

count=1

while [ $count -le 5 ]
do
echo "Loop #$count"
sleep 1
count=$(( $count + 1 ))
done

user1@lab:~$ ./myscript
Loop #1
Loop #2
^CGoodbye...

user1@lab:~$ ./myscript
Loop #1
Loop #2
Loop #3
^CGoodbye...

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

trap "echo 'Ctrl-C is trapped.'" SIGINT

count=1

while [ $count -le 5 ]
do
echo "Loop #$count"
sleep 1
count=$(( $count + 1 ))
done

trap "echo ' I modified the trap!'" SIGINT

count=1

while [ $count -le 5 ]
do
echo "Second Loop #$count"
sleep 1
count=$(( $count + 1 ))
done

user1@lab:~$ ./myscript
Loop #1
Loop #2
Loop #3
^CCtrl-C is trapped.
Loop #4
Loop #5
^CCtrl-C is trapped.
Second Loop #1
Second Loop #2
Second Loop #3
^C I modified the trap!
Second Loop #4
Second Loop #5
^C I modified the trap!

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

trap "echo 'Ctrl-C is trapped.'" SIGINT
count=1
while [ $count -le 5 ]
do
echo "Loop #$count"
sleep 1
count=$(( $count + 1 ))
done
trap -- SIGINT
echo "I just removed the trap"
count=1
while [ $count -le 5 ]
do
echo "Second Loop #$count"
sleep 1
count=$(( $count + 1 ))
done

user1@lab:~$ ./myscript
Loop #1
Loop #2
^CCtrl-C is trapped.
Loop #3
Loop #4
^CCtrl-C is trapped.
Loop #5
I modified the trap!
Second Loop #1
^C

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

count=1
while [ $count -le 10 ]
do
sleep 1
count=$(( $count + 1 ))
done

user1@lab:~$ ./myscript &
[1] 4280

user1@lab:~$ ps -l
F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
0 S  1000  3623  3622  0  80   0 -  5282 wait   pts/2    00:00:00 bash
0 S  1000  4280  3623  0  80   0 -  2904 wait   pts/2    00:00:00 myscript
0 S  1000  4283  4280  0  80   0 -  1606 hrtime pts/2    00:00:00 sleep
0 R  1000  4284  3623  0  80   0 -  7005 -      pts/2    00:00:00 ps

-----------------------------------------------------------------------------------------

user1@lab:~$ nohup ./myscript &
[1] 4342
user1@lab:~$ nohup: ignoring input and appending output to 'nohup.out'

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

count=1
while [ $count -le 10 ]
do
echo "Loop #$count"
sleep 10
count=$(( $count + 1 ))
done

user1@lab:~$ ./myscript
Loop #1
^Z
[1]+  Stopped                 ./myscript

user1@lab:~$ ./myscript > outfile &
[2] 4399

user1@lab:~$ jobs -l
[1]+  4395 Stopped                 ./myscript
[2]-  4399 Running                 ./myscript > outfile &

-----------------------------------------------------------------------------------------

user1@lab:~$ ./myscript
Loop #1
^Z
[1]+  Stopped                 ./myscript

user1@lab:~$ bg
[1]+ ./myscript &

user1@lab:~$ Loop #2
jobs
[1]+  Running                 ./myscript &
user1@lab:~$ Loop #3
fg 1
./myscript
Loop #4
^C

user1@lab:~$ ./myscript
Loop #1
^Z
[1]+  Stopped                 ./myscript

user1@lab:~$ fg 1
./myscript

^C

-----------------------------------------------------------------------------------------

.....

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function myfunc {
echo "This is an example of using a function"
}

count=1

while [ $count -le 3 ]
do
myfunc
count=$(( $count + 1 ))
done
echo "This is the end of the loop"
myfunc
echo "End of the script"

user1@lab:~$ ./myscript
This is an example of using a function
This is an example of using a function
This is an example of using a function
This is the end of the loop
This is an example of using a function
End of the script

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

count=1

while [ $count -le 3 ]
do
myfunc
count=$(( $count + 1 ))
done
echo "This is the end of the loop"

function myfunc {
echo "This is an example of using a function"
}

echo "End of the script"

user1@lab:~$ ./myscript
./myscript: line 7: myfunc: command not found
./myscript: line 7: myfunc: command not found
./myscript: line 7: myfunc: command not found
This is the end of the loop
End of the script

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function myfunc {
echo "The first function definition"
}

myfunc

function myfunc {
echo "The second function definition"
}

myfunc
echo "End of the script"

user1@lab:~$ ./myscript
The first function definition
The second function definition
End of the script

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function myfunc {
read -p "Enter a value: " value
echo "adding value"
return $(( $value + 10 ))
}

myfunc
echo "The new value is $?"

user1@lab:~$ ./myscript
Enter a value: 20
adding value
The new value is 30

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function myfunc {
read -p "Enter a value: " value
echo $(( $value + 10 ))
}

result=$( myfunc)
echo "The value is $result"

user1@lab:~$ ./myscript
Enter a value: 40
The value is 50

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function addnum {
if [ $# -eq 0 ] || [ $# -gt 2 ]
then
echo -1
elif [ $# -eq 1 ]
then
echo $(( $1 + $1 ))
else
echo $(( $1 + $2 ))
fi
}

echo -n "Adding 10 and 15: "
value=$(addnum 10 15)
echo $value

echo -n "Adding one number: "
value=$(addnum 10)
echo $value

echo -n "Adding no numbers: "
value=$(addnum)
echo $value

echo -n "Adding three numbers: "
value=$(addnum 10 15 20)
echo $value

user1@lab:~$ ./myscript
Adding 10 and 15: 25
Adding one number: 20
Adding no numbers: -1
Adding three numbers: -1

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function myfunc {
echo $(( $1 + $2 ))
}

if [ $# -eq 2 ]
then
value=$( myfunc)
echo "The result is $value"
else
echo "Usage: myfunc a b"
fi

user1@lab:~$ ./myscript 10 20
./myscript: line 4: +  : syntax error: operand expected (error token is "+  ")
The result is

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function myfunc {
echo $(( $1 + $2 ))
}

if [ $# -eq 2 ]
then
value=$(myfunc $1 $2)
echo "The result is $value"
else
echo "Usage: myfunc a b"
fi

user1@lab:~$ ./myscript 10 20
The result is 30

user1@lab:~$ ./myscript
Usage: myfunc a b

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function myfunc {
value=$(( $value + 10 ))
}

read -p "Enter a value: " value
myfunc
echo "The new value is: $value"

user1@lab:~$ ./myscript
Enter a value: 20
The new value is: 30

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function myfunc {
local temp=$[ $value + 5 ]
echo "The Temp from inside function is $temp"
}

temp=4
myfunc
echo "The temp from outside is $temp"

user1@lab:~$ ./myscript
The Temp from inside function is 5
The temp from outside is 4

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function myfunc {
echo "The parameters are: $@"
arr=$1
echo "The received array is ${arr[*]}"
}

myarray=(1 2 3 4 5)
echo "The original array is: ${myarray[*]}"
myfunc $myarray

user1@lab:~$ ./myscript
The original array is: 1 2 3 4 5
The parameters are: 1
The received array is 1

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function myfunc {
local newarray
newarray=("$@")
echo "The new array value is: ${newarray[*]}"
}

myarray=(1 2 3 4 5)
echo "The original array is ${myarray[*]}"
myfunc ${myarray[*]}

user1@lab:~$ ./myscript
The original array is 1 2 3 4 5
The new array value is: 1 2 3 4 5

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

function factorial {
if [ $1 -eq 1 ]
then
echo 1
else
local temp=$(( $1 - 1 ))
local result=$(factorial $temp)
echo $(( $result * $1 ))
fi
}

read -p "Enter value: " value
result=$(factorial $value)
echo "The factorial of $value is: $result"

user1@lab:~$ ./myscript
Enter value: 10
The factorial of 10 is: 3628800

user1@lab:~$ ./myscript
Enter value: 1
The factorial of 1 is: 1

user1@lab:~$ ./myscript
Enter value: 3
The factorial of 3 is: 6

-----------------------------------------------------------------------------------------

user1@lab:~$ touch myfuncs
user1@lab:~$ chmod +x ./myfuncs

user1@lab:~$ ls -l
total 40
-rw-rw-r-- 1 user1 user1  17 Nov  5 22:27 content
-rw-rw-r-- 1 user1 user1  49 Nov  5 22:19 correctcontent
-rw-rw-r-- 1 user1 user1 112 Nov  5 22:19 errorcontent
-rw-rw-r-- 1 user1 user1  39 Nov  5 22:32 myerror
-rw-rw-r-- 1 user1 user1   0 Nov  5 22:53 myfile
-rw-rw-r-- 1 user1 user1 108 Nov  5 20:22 myfile.txt
-rw-rw-r-- 1 user1 user1   0 Nov  5 22:53 myfile1
-rw-rw-r-- 1 user1 user1   0 Nov  5 22:53 myfile2
-rw-rw-r-- 1 user1 user1   0 Nov  5 22:52 myfile3
-rwxrwxr-x 1 user1 user1  54 Nov  6 22:40 myfuncs
-rwxrwxr-x 1 user1 user1  79 Nov  6 22:40 myscript
-rw------- 1 user1 user1   0 Nov  6 19:33 nohup.out
-rw-rw-r-- 1 user1 user1  81 Nov  6 20:39 outfile
-rw-rw-r-- 1 user1 user1   0 Nov  4 18:45 pids
-rw-rw-r-- 1 user1 user1   0 Oct 20 09:29 test.sh
-rw-rw-r-- 1 user1 user1  70 Nov  5 22:41 testfile
-rwxrwxr-x 1 user1 user1  26 Oct 27 07:24 text

user1@lab:~$ nano ./myfuncs

  GNU nano 2.5.3              File: ./myfuncs                        Modified

#!/bin/bash

function addnum {
echo $(( $1 + $2 ))
}

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

. ./myfuncs

result=$(addnum 10 20)
echo "The result is: $result"

user1@lab:~$ ./myscript
The result is: 30

-----------------------------------------------------------------------------------------

.......

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash

-----------------------------------------------------------------------------------------

user1@lab:~$ nano ./myscript

  GNU nano 2.5.3              File: ./myscript                        Modified

#!/bin/bash
